schema {
  query: BlockQuery
}

type Action {
  plainValue: [PlainValueKeyValuePairType]
}

type Block {
  difficulty: Int!
  hash: ID
  index: Int!
  miner: String
  nonce: String
  previousHash: String
  timestamp: DateTimeOffset!
  transactions: [Transaction]
}

type BlockQuery {
  block(hash: ID = null): Block
  blocks(desc: Boolean = false, offset: Int = 0, limit: Int = 7673): [Block]
}

# The `Date` scalar type represents a year, month and day in accordance with the
# [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
scalar Date

# The `DateTime` scalar type represents a date and time. `DateTime` expects
# timestamps to be formatted in accordance with the
# [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
scalar DateTime

# The `DateTimeOffset` scalar type represents a date, time and offset from UTC.
# `DateTimeOffset` expects timestamps to be formatted in accordance with the
# [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) standard.
scalar DateTimeOffset

scalar Decimal

# The `Milliseconds` scalar type represents a period of time represented as the total number of milliseconds.
scalar Milliseconds

type PlainValueKeyValuePairType {
  key: String
  value: String
}

# The `Seconds` scalar type represents a period of time represented as the total number of seconds.
scalar Seconds

type Transaction {
  actions: [Action]
  nonce: Int!
  publicKey: String
  signature: ID
  signer: String
  timestamp: DateTimeOffset!
  updatedAddress: [String]
}

